#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

###############################################################################
# This script is used to copy a VM image (SRC) to the image repository as DST
# Several SRC types are supported
###############################################################################
# -------- Set up the environment to source common tools & conf ------------
if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
UTILS_PATH="${DRIVER_PATH}/.."

source ${DRIVER_PATH}/../libfs.sh
source ${DRIVER_PATH}/../../etc/datastore/linstor_un/linstor_un.conf
source ${DRIVER_PATH}/linstor_utils.sh

# -------- Get cp and datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

XPATH="${UTILS_PATH}/xpath.rb -b $DRV_ACTION"

unset i j XPATH_ELEMENTS


while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/BASE_PATH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RESTRICTED_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/STAGING_DIR \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/LS_CONTROLLERS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/NODE_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/LAYER_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/REPLICAS_ON_SAME \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/REPLICAS_ON_DIFFERENT \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/AUTO_PLACE \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/DO_NOT_PLACE_WITH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/DO_NOT_PLACE_WITH_REGEX \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/STORAGE_POOL \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/DISKLESS_POOL \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/ENCRYPTION \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PATH \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE)

BASE_PATH="${XPATH_ELEMENTS[j++]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[j++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
STAGING_DIR="${XPATH_ELEMENTS[j++]:-$STAGING_DIR}"
LS_CONTROLLERS="${XPATH_ELEMENTS[j++]}"
NODE_LIST="${XPATH_ELEMENTS[j++]}"
LAYER_LIST="${XPATH_ELEMENTS[j++]}"
REPLICAS_ON_SAME="${XPATH_ELEMENTS[j++]}"
REPLICAS_ON_DIFFERENT="${XPATH_ELEMENTS[j++]}"
AUTO_PLACE="${XPATH_ELEMENTS[j++]}"
DO_NOT_PLACE_WITH="${XPATH_ELEMENTS[j++]}"
DO_NOT_PLACE_WITH_REGEX="${XPATH_ELEMENTS[j++]}"
STORAGE_POOL="${XPATH_ELEMENTS[j++]}"
DISKLESS_POOL="${XPATH_ELEMENTS[j++]:-DfltDisklessStorPool}"
ENCRYPTION="${XPATH_ELEMENTS[j++]}"
SRC="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]}"

SRC_RES="$(echo "$SRC" | $AWK -F/ '{print $(NF-1)}')"
DST_RES="one-image-${ID}"
DST_DEV="/dev/drbd/by-res/${DST_RES}/0"
DST="$DST_DEV"

SRC_HOST=`linstor_get_host_for_res $SRC_RES 0 $ID`

if [ -z "$SRC_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi
if [ -z "$NODE_LIST" ] && [ -z "$AUTO_PLACE" ]; then
    error_message "Datastore template missing 'NODE_LIST' or 'AUTO_PLACE' attribute."
    exit -1
fi
if [ -z "$STORAGE_POOL" ]; then
    error_message "Datastore template missing 'STORAGE_POOL' attribute."
    exit -1
fi

linstor_load_keys

SAFE_DIRS=""

VD_DATA="$($LINSTOR -m volume-definition list)"
VD_STATUS=$?

if [ "$VD_STATUS" != "0" ]; then
    echo "$VD_DATA"
    exit $VD_STATUS
fi

ORIGINAL_SIZE_K="$(linstor_vd_size "$VD_DATA" "$SRC_RES")"
if [ -z "$ORIGINAL_SIZE_K" ]; then
    echo "Error getting $SRC_RES volume size"
    exit 1
fi

linstor_deploy_volume "$DST_RES" "${ORIGINAL_SIZE_K}K"

linstor_attach_volume "$SRC_HOST" "$SRC_RES" "$DISKLESS_POOL"
linstor_attach_volume "$SRC_HOST" "$DST_RES" "$DISKLESS_POOL"

ssh_exec_and_log "$SRC_HOST" "$QEMU_IMG convert -O raw $SRC $DST_DEV" \
                 "Error cloning $SRC to $DST_DEV on $SRC_HOST"

linstor_detach_volume "$SRC_HOST" "$SRC_RES" 1
linstor_detach_volume "$SRC_HOST" "$DST_RES" 1

echo "$DST"
